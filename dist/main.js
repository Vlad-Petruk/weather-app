(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Q2:()=>d,gh:()=>r}),async function(){fetch("https://www.weatherapi.com/docs/weather_conditions.json").then((e=>{if(!e.ok)throw new Error(`Network response was not ok: ${e.statusText}`);return e.json()})).then((e=>{console.log(e)})).catch((e=>{console.error("Fetch error:",e)}))}();const t=document.querySelector("body");async function n(e,n){try{const o=await d(e);console.log(o),r.innerHTML="";let c=document.createElement("p");c.textContent=`${o.location.city}, ${o.location.country}`;let l=document.createElement("p");l.textContent=o.location.time;let i=document.createElement("div");i.classList.add("flex-centered");let a=document.createElement("img");a.src=o.conditions.icon;let s=document.createElement("p");if(s.textContent=o.conditions.text,r.appendChild(c),"F"===n){let e=document.createElement("p");e.textContent=`${o.temp_f}°F`,i.appendChild(e)}else if("C"===n){let e=document.createElement("p");e.textContent=`${o.temp_c}°C`,i.appendChild(e)}i.appendChild(a),i.appendChild(s),r.appendChild(i),r.appendChild(l),r.classList.add("flex-centered-col"),"Overcast "===o.conditions.text&&(t.style.background="blue")}catch(e){console.log(e)}}const o=document.querySelector(".input"),c=document.querySelector(".searchBtn"),r=document.querySelector(".weather-card"),l=document.querySelector(".error"),i=document.querySelector(".buttonC"),a=document.querySelector(".buttonF");async function d(e){try{l.textContent="";const t=await async function(e){try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=7a84c19e7f6245b7814141628240402&q=${e}&days=3&aqi=no&alerts=no`,{mode:"cors"}),n=await t.json();if(!n.location)throw new Error("No matching location found");return n}catch(e){console.log(e)}}(e);return null==t&&(l.textContent="No matching location found"),console.log(t),function(e){try{const t={conditions:{icon:e.current.condition.icon,text:e.current.condition.text},temp_c:e.current.temp_c,feelslike_c:e.current.feelslike_c,temp_f:e.current.temp_f,feelslike_f:e.current.feelslike_f,wind_speed:e.current.wind_kph,cloud:e.current.cloud,location:{country:e.location.country,city:e.location.name,time:e.location.localtime}};return console.log(t),t}catch(e){console.log(e)}}(t)}catch(e){console.log(e)}}o.value="Kamieniec Podolski",i.addEventListener("click",(()=>{n(o.value,"C")})),a.addEventListener("click",(()=>{n(o.value,"F")})),c.addEventListener("click",(()=>{n(o.value,"C")})),n("Kamieniec Podolski","C")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,