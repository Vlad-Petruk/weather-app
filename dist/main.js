(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Q2:()=>u,gh:()=>i}),async function(){fetch("https://www.weatherapi.com/docs/weather_conditions.json").then((e=>{if(!e.ok)throw new Error(`Network response was not ok: ${e.statusText}`);return e.json()})).then((e=>{console.log(e)})).catch((e=>{console.error("Fetch error:",e)}))}();const t=document.querySelector(".main-container"),n=document.querySelector(".toggleButtons"),o=document.querySelector(".input-group");async function c(e,c){try{const r=await u(e);console.log(r),i.innerHTML="";let l=document.createElement("p");l.textContent=`${r.location.city}, ${r.location.country}`;let a=document.createElement("p");a.textContent=r.location.time;let d=document.createElement("div");d.classList.add("flex-centered");let s=document.createElement("img");s.src=r.conditions.icon;let p=document.createElement("p");if(p.textContent=r.conditions.text,i.appendChild(n),i.appendChild(o),i.appendChild(l),"F"===c){let e=document.createElement("p");e.textContent=`${r.temp_f}°F`,d.appendChild(e)}else if("C"===c){let e=document.createElement("p");e.textContent=`${r.temp_c}°C`,d.appendChild(e)}d.appendChild(s),d.appendChild(p),i.appendChild(d),i.appendChild(a),i.classList.add("flex-centered-col"),"Overcast "===r.conditions.text&&(t.style.background="blue")}catch(e){console.log(e)}}const r=document.querySelector(".input"),l=document.querySelector(".searchBtn"),i=document.querySelector(".weather-card"),a=document.querySelector(".error"),d=document.querySelector(".buttonC"),s=document.querySelector(".buttonF");async function u(e){try{a.textContent="";const t=await async function(e){try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=7a84c19e7f6245b7814141628240402&q=${e}&days=3&aqi=no&alerts=no`,{mode:"cors"}),n=await t.json();if(!n.location)throw new Error("No matching location found");return n}catch(e){console.log(e)}}(e);return null==t&&(a.textContent="No matching location found"),console.log(t),function(e){try{const t={conditions:{icon:e.current.condition.icon,text:e.current.condition.text},temp_c:e.current.temp_c,feelslike_c:e.current.feelslike_c,temp_f:e.current.temp_f,feelslike_f:e.current.feelslike_f,wind_speed:e.current.wind_kph,cloud:e.current.cloud,location:{country:e.location.country,city:e.location.name,time:e.location.localtime}};return console.log(t),t}catch(e){console.log(e)}}(t)}catch(e){console.log(e)}}r.value="Kamieniec Podolski",d.addEventListener("click",(()=>{c(r.value,"C")})),s.addEventListener("click",(()=>{c(r.value,"F")})),l.addEventListener("click",(()=>{c(r.value,"C")})),c("Kamieniec Podolski","C")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,