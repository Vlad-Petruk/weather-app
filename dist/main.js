(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};async function t(e){const t=await i(e);console.log(t),c.innerHTML="";let n=document.createElement("p");n.textContent=`${t.location.city}, ${t.location.country}`;let o=document.createElement("p");o.textContent=t.location.time;let r=document.createElement("div");r.classList.add("flex-centered");let l=document.createElement("img");l.src=t.conditions.icon;let a=document.createElement("p");a.textContent=t.conditions.text,r.appendChild(l),r.appendChild(a),c.appendChild(n),c.appendChild(o),c.appendChild(r)}e.d({},{Q:()=>i,g:()=>c});const n=document.querySelector(".input"),o=document.querySelector(".searchBtn"),c=document.querySelector(".weather-card"),r=document.querySelector(".error");async function i(e){try{r.textContent="";const t=await async function(e){try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=7a84c19e7f6245b7814141628240402&q=${e}&days=3&aqi=no&alerts=no`,{mode:"cors"}),n=await t.json();if(!n.location)throw new Error("No matching location found");return n}catch(e){console.log(e)}}(e);return null==t&&(r.textContent="No matching location found"),console.log(t),function(e){try{const t={conditions:{icon:e.current.condition.icon,text:e.current.condition.text},temp_c:e.current.temp_c,feelslike_c:e.current.feelslike_c,temp_f:e.current.temp_f,feelslike_f:e.current.feelslike_f,wind_speed:e.current.wind_kph,cloud:e.current.cloud,location:{country:e.location.country,city:e.location.name,time:e.location.localtime}};return console.log(t),t}catch(e){console.log(e)}}(t)}catch(e){console.log(e)}}o.addEventListener("click",(()=>{t(n.value)})),t("Kamieniec Podolski")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,