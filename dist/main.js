(()=>{"use strict";var e={d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Q2:()=>q,gh:()=>f}),async function(){fetch("https://www.weatherapi.com/docs/weather_conditions.json").then((e=>{if(!e.ok)throw new Error(`Network response was not ok: ${e.statusText}`);return e.json()})).then((e=>{console.log(e)})).catch((e=>{console.error("Fetch error:",e)}))}();const t=document.querySelector(".main-container"),o=document.querySelector(".toggleButtons"),n=document.querySelector(".input-group"),c=document.querySelector(".header"),r=document.querySelector(".conditions"),i=document.querySelector(".cond-icon"),l=document.querySelector(".cond-text"),u=document.querySelector(".temp"),a=document.querySelector(".extra-box"),d=document.querySelector(".wind"),s=document.querySelector(".feels-like"),m=document.querySelector(".time");async function y(e,y){try{const p=await q(e);f.innerHTML="",c.textContent=`${p.location.city}, ${p.location.country}`,i.src=p.conditions.icon,l.textContent=p.conditions.text,f.appendChild(o),f.appendChild(n),f.appendChild(c),"F"===y?u.textContent=`${p.temp_f}째F`:"C"===y&&(u.textContent=`${p.temp_c}째C`),d.textContent=`Wind speed: ${p.wind_speed} km/h`,"F"===y?s.textContent=`Feels like: ${p.feelslike_c}째F`:"C"===y&&(s.textContent=`Feels like: ${p.feelslike_c}째C`),m.textContent=p.location.time,f.appendChild(r),f.appendChild(a),f.classList.add("flex-centered-col"),"Overcast "===p.conditions.text&&(t.style.background="blue")}catch(e){console.log(e)}}const p=document.querySelector(".input"),h=document.querySelector(".searchBtn"),f=document.querySelector(".weather-card"),C=document.querySelector(".error"),w=document.querySelector(".buttonC"),k=document.querySelector(".buttonF");async function q(e){try{C.textContent="";const t=await async function(e){try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=7a84c19e7f6245b7814141628240402&q=${e}&days=3&aqi=no&alerts=no`,{mode:"cors"}),o=await t.json();if(!o.location)throw new Error("No matching location found");return o}catch(e){console.log(e)}}(e);return null==t&&(C.textContent="No matching location found"),console.log(t),function(e){try{const t={conditions:{icon:e.current.condition.icon,text:e.current.condition.text},temp_c:e.current.temp_c,feelslike_c:e.current.feelslike_c,temp_f:e.current.temp_f,feelslike_f:e.current.feelslike_f,wind_speed:e.current.wind_kph,cloud:e.current.cloud,location:{country:e.location.country,city:e.location.name,time:e.location.localtime}};return console.log(t),t}catch(e){console.log(e)}}(t)}catch(e){console.log(e)}}p.value="Kamieniec Podolski",w.addEventListener("click",(()=>{y(p.value,"C")})),k.addEventListener("click",(()=>{y(p.value,"F")})),h.addEventListener("click",(()=>{y(p.value,"C")})),y("Kamieniec Podolski","C")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,